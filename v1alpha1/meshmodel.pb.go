// Copyright 2021 MegaEase
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.16.0
// source: meshmodel.proto

package v1apha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RateLimiterPolicy is the limiting policy used for Resilience component RateLimiter.
// It contains the basic configurations for the limiter, including the permission number,
// the duration for request waiting and the permission count refreshing period.
type RateLimiterPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of this policy
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The duration for one request should wait for a permission,e.g.,500ms.
	TimeoutDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=timeoutDuration,proto3" json:"timeoutDuration,omitempty"`
	// The period of a limit refresh. After each period the rate limiter sets
	// its permissions count back to the limitForPeriod value
	LimitRefreshPeriod *durationpb.Duration `protobuf:"bytes,3,opt,name=limitRefreshPeriod,proto3" json:"limitRefreshPeriod,omitempty"`
	// The number of permissions available during one limit refresh period
	LimitForPeriod int32 `protobuf:"varint,4,opt,name=limitForPeriod,proto3" json:"limitForPeriod,omitempty"`
}

func (x *RateLimiterPolicy) Reset() {
	*x = RateLimiterPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiterPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiterPolicy) ProtoMessage() {}

func (x *RateLimiterPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiterPolicy.ProtoReflect.Descriptor instead.
func (*RateLimiterPolicy) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimiterPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RateLimiterPolicy) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *RateLimiterPolicy) GetLimitRefreshPeriod() *durationpb.Duration {
	if x != nil {
		return x.LimitRefreshPeriod
	}
	return nil
}

func (x *RateLimiterPolicy) GetLimitForPeriod() int32 {
	if x != nil {
		return x.LimitForPeriod
	}
	return 0
}

// StringMatch can be used to match string in different ways.
// Its priority is according to the field order. StringMatch will try exactly matching firstly,
// then try to check has the same prefix, at last, it will use the regular expression to match the
// string if it's provided
type StringMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL matching with exactly
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3" json:"exact,omitempty"`
	// URL matching with prefix
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// URL matching with regular expression
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *StringMatch) Reset() {
	*x = StringMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch) ProtoMessage() {}

func (x *StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch.ProtoReflect.Descriptor instead.
func (*StringMatch) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{1}
}

func (x *StringMatch) GetExact() string {
	if x != nil {
		return x.Exact
	}
	return ""
}

func (x *StringMatch) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *StringMatch) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

// URLRule can be used to filter HTTP request by using HTTP method and URL.
type URLRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allowed HTTP method string, e.g. "GET","DELETE","POST"
	Methods []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	// Describe how to match the HTTP request URL.
	Url *StringMatch `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Which policy this URLRule references to.
	PolicyRef string `protobuf:"bytes,3,opt,name=policyRef,proto3" json:"policyRef,omitempty"`
}

func (x *URLRule) Reset() {
	*x = URLRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLRule) ProtoMessage() {}

func (x *URLRule) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLRule.ProtoReflect.Descriptor instead.
func (*URLRule) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{2}
}

func (x *URLRule) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *URLRule) GetUrl() *StringMatch {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *URLRule) GetPolicyRef() string {
	if x != nil {
		return x.PolicyRef
	}
	return ""
}

// RateLimiter can establish your services' high availability and reliability,
// also it can be used for scaling APIs. Protect your servers from overwhelm
// by peek traffic.
type RateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RateLimiterPolicy contains different limiting configurations for this limiter to use.
	Policies []*RateLimiterPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// DefaultPolicyRef is the default reference policy name.
	DefaultPolicyRef string `protobuf:"bytes,2,opt,name=defaultPolicyRef,proto3" json:"defaultPolicyRef,omitempty"`
	// URLs descibs the HTTP requess matching schemes for this limiter to filter.
	Urls []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *RateLimiter) Reset() {
	*x = RateLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter) ProtoMessage() {}

func (x *RateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter.ProtoReflect.Descriptor instead.
func (*RateLimiter) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{3}
}

func (x *RateLimiter) GetPolicies() []*RateLimiterPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *RateLimiter) GetDefaultPolicyRef() string {
	if x != nil {
		return x.DefaultPolicyRef
	}
	return ""
}

func (x *RateLimiter) GetUrls() []*URLRule {
	if x != nil {
		return x.Urls
	}
	return nil
}

// Service is the basic element in EaseMesh to describe a user's business microservice's
// name, belonging tenant and governance specs.
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the mesh service's name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ResigerTeant is the tenatn's ame this service belongs to.
	RegisterTenant string `protobuf:"bytes,2,opt,name=registerTenant,proto3" json:"registerTenant,omitempty"`
	// Resilience is the resilent configurations.
	Resilience *Resilience `protobuf:"bytes,3,opt,name=resilience,proto3" json:"resilience,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{4}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetRegisterTenant() string {
	if x != nil {
		return x.RegisterTenant
	}
	return ""
}

func (x *Service) GetResilience() *Resilience {
	if x != nil {
		return x.Resilience
	}
	return nil
}

// Resilience includes four key types of resilience features, RateLimiter, CircuitBreaker, Retryer and Timeout.
// Following the design of Resilience4j library.
type Resilience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit and protect backend services.
	RateLimiter *RateLimiter `protobuf:"bytes,1,opt,name=rateLimiter,proto3" json:"rateLimiter,omitempty"`
}

func (x *Resilience) Reset() {
	*x = Resilience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resilience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resilience) ProtoMessage() {}

func (x *Resilience) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resilience.ProtoReflect.Descriptor instead.
func (*Resilience) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{5}
}

func (x *Resilience) GetRateLimiter() *RateLimiter {
	if x != nil {
		return x.RateLimiter
	}
	return nil
}

var File_meshmodel_proto protoreflect.FileDescriptor

var file_meshmodel_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x51, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x22, 0x73, 0x0a, 0x07, 0x55, 0x52, 0x4c,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x30,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x22, 0xab,
	0x01, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x52, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x69, 0x6c, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x42, 0x16, 0x5a, 0x14, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_meshmodel_proto_rawDescOnce sync.Once
	file_meshmodel_proto_rawDescData = file_meshmodel_proto_rawDesc
)

func file_meshmodel_proto_rawDescGZIP() []byte {
	file_meshmodel_proto_rawDescOnce.Do(func() {
		file_meshmodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshmodel_proto_rawDescData)
	})
	return file_meshmodel_proto_rawDescData
}

var file_meshmodel_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_meshmodel_proto_goTypes = []interface{}{
	(*RateLimiterPolicy)(nil),   // 0: easemesh.v1alpha1.RateLimiterPolicy
	(*StringMatch)(nil),         // 1: easemesh.v1alpha1.StringMatch
	(*URLRule)(nil),             // 2: easemesh.v1alpha1.URLRule
	(*RateLimiter)(nil),         // 3: easemesh.v1alpha1.RateLimiter
	(*Service)(nil),             // 4: easemesh.v1alpha1.Service
	(*Resilience)(nil),          // 5: easemesh.v1alpha1.Resilience
	(*durationpb.Duration)(nil), // 6: google.protobuf.Duration
}
var file_meshmodel_proto_depIdxs = []int32{
	6, // 0: easemesh.v1alpha1.RateLimiterPolicy.timeoutDuration:type_name -> google.protobuf.Duration
	6, // 1: easemesh.v1alpha1.RateLimiterPolicy.limitRefreshPeriod:type_name -> google.protobuf.Duration
	1, // 2: easemesh.v1alpha1.URLRule.url:type_name -> easemesh.v1alpha1.StringMatch
	0, // 3: easemesh.v1alpha1.RateLimiter.policies:type_name -> easemesh.v1alpha1.RateLimiterPolicy
	2, // 4: easemesh.v1alpha1.RateLimiter.urls:type_name -> easemesh.v1alpha1.URLRule
	5, // 5: easemesh.v1alpha1.Service.resilience:type_name -> easemesh.v1alpha1.Resilience
	3, // 6: easemesh.v1alpha1.Resilience.rateLimiter:type_name -> easemesh.v1alpha1.RateLimiter
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_meshmodel_proto_init() }
func file_meshmodel_proto_init() {
	if File_meshmodel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meshmodel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiterPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resilience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshmodel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshmodel_proto_goTypes,
		DependencyIndexes: file_meshmodel_proto_depIdxs,
		MessageInfos:      file_meshmodel_proto_msgTypes,
	}.Build()
	File_meshmodel_proto = out.File
	file_meshmodel_proto_rawDesc = nil
	file_meshmodel_proto_goTypes = nil
	file_meshmodel_proto_depIdxs = nil
}
