// Copyright 2021 MegaEase
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.16.0
// source: meshmodel.proto

package v1apha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RateLimiterPolicy is the limiting policy used for Resilience component RateLimiter.
// It contains the basic configurations for the limiter, including the permission number,
// the duration for request waiting and the permission count refreshing period.
type RateLimiterPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the identify of this policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TimeoutDuration is the duration for one request should wait for a permission,e.g.,500ms.
	TimeoutDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=timeoutDuration,proto3" json:"timeoutDuration,omitempty"`
	// LimitRefreshPeriod is the period of a limit refresh. After each period the rate limiter sets
	// its permissions count back to the limitForPeriod value.
	LimitRefreshPeriod *durationpb.Duration `protobuf:"bytes,3,opt,name=limitRefreshPeriod,proto3" json:"limitRefreshPeriod,omitempty"`
	// limitForPeriod is the number of permissions available during one limit refresh period.
	LimitForPeriod int32 `protobuf:"varint,4,opt,name=limitForPeriod,proto3" json:"limitForPeriod,omitempty"`
}

func (x *RateLimiterPolicy) Reset() {
	*x = RateLimiterPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiterPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiterPolicy) ProtoMessage() {}

func (x *RateLimiterPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiterPolicy.ProtoReflect.Descriptor instead.
func (*RateLimiterPolicy) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimiterPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RateLimiterPolicy) GetTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.TimeoutDuration
	}
	return nil
}

func (x *RateLimiterPolicy) GetLimitRefreshPeriod() *durationpb.Duration {
	if x != nil {
		return x.LimitRefreshPeriod
	}
	return nil
}

func (x *RateLimiterPolicy) GetLimitForPeriod() int32 {
	if x != nil {
		return x.LimitForPeriod
	}
	return 0
}

// CircuitBreakerPolicy is the policy for describing Resilience component CircuitBreaker.
// It contains the basic configurations for the breaker, including the type of sliding window this
// breaker will use. Whether including network error or not and so on.
type CircuitBreakerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  Name is the identify of this policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// SlidingWindowType is the sliding window type of this break, only "COUNT_BASED" or "TIME_BASED" allowed.
	SlidingWindowType string `protobuf:"bytes,2,opt,name=slidingWindowType,proto3" json:"slidingWindowType,omitempty"`
	// FailureRateThreshold configures the failure rate threshold in percentage. When the failure rate is equal
	// or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls.
	FailureRateThreshold uint32 `protobuf:"varint,3,opt,name=failureRateThreshold,proto3" json:"failureRateThreshold,omitempty"`
	// SlowCallRateThreshold Configures a threshold in percentage. The CircuitBreaker considers a call as slow
	// when the call duration is greater than slowCallDurationThreshold When the percentage of slow calls is
	// equal or greater the threshold, the CircuitBreaker transitions to open and starts short-circuiting calls.
	SlowCallRateThreshold uint32 `protobuf:"varint,4,opt,name=slowCallRateThreshold,proto3" json:"slowCallRateThreshold,omitempty"`
	// CountingNetworkError configures whether a network failure situation should active CircuitBreaker or not. .
	CountingNetworkError bool `protobuf:"varint,5,opt,name=countingNetworkError,proto3" json:"countingNetworkError,omitempty"`
	// SlidingWindowSize configures the size of the sliding window which is used to record the outcome of
	// calls when the CircuitBreaker is closed.
	SlidingWindowSize uint32 `protobuf:"varint,6,opt,name=slidingWindowSize,proto3" json:"slidingWindowSize,omitempty"`
	// PermittedNumberOfCallsInHalfOpenState configures the number of permitted calls when the CircuitBreaker
	// is half open.
	PermittedNumberOfCallsInHalfOpenState uint32 `protobuf:"varint,7,opt,name=permittedNumberOfCallsInHalfOpenState,proto3" json:"permittedNumberOfCallsInHalfOpenState,omitempty"`
	// MinimumNumberOfCalls configures the minimum number of calls which are required (per sliding window period)
	// before the CircuitBreaker can calculate the error rate or slow call rate.  For example,
	// if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be
	// calculated. If only 9 calls have been recorded the CircuitBreaker will not transition to open
	// even if all 9 calls have failed.
	MinimumNumberOfCalls uint32 `protobuf:"varint,8,opt,name=minimumNumberOfCalls,proto3" json:"minimumNumberOfCalls,omitempty"`
	// SlowCallDurationThreshold configures the duration threshold above which calls are considered as slow
	// and increase the rate of slow calls.
	SlowCallDurationThreshold string `protobuf:"bytes,9,opt,name=slowCallDurationThreshold,proto3" json:"slowCallDurationThreshold,omitempty"`
	// MaxWaitDurationInHalfOpenState configures a maximum wait duration which controls the longest amount
	// of time a CircuitBreaker could stay in Half Open state, before it switches to open. Value 0 means
	// Circuit Breaker would wait infinitely in HalfOpen State until all permitted calls have been completed.
	MaxWaitDurationInHalfOpenState string `protobuf:"bytes,10,opt,name=maxWaitDurationInHalfOpenState,proto3" json:"maxWaitDurationInHalfOpenState,omitempty"`
	// WaitDurationInOpenState configures the time that the CircuitBreaker should wait before transitioning
	// from open to half-open,e.g.,60000ms.
	WaitDurationInOpenState string `protobuf:"bytes,11,opt,name=waitDurationInOpenState,proto3" json:"waitDurationInOpenState,omitempty"`
	// FailureStatusCodes is the array for HTTP failure status code for this CircuitBreakerPolicy.
	FailureStatusCodes []int32 `protobuf:"varint,12,rep,packed,name=failureStatusCodes,proto3" json:"failureStatusCodes,omitempty"`
}

func (x *CircuitBreakerPolicy) Reset() {
	*x = CircuitBreakerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerPolicy) ProtoMessage() {}

func (x *CircuitBreakerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerPolicy.ProtoReflect.Descriptor instead.
func (*CircuitBreakerPolicy) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{1}
}

func (x *CircuitBreakerPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CircuitBreakerPolicy) GetSlidingWindowType() string {
	if x != nil {
		return x.SlidingWindowType
	}
	return ""
}

func (x *CircuitBreakerPolicy) GetFailureRateThreshold() uint32 {
	if x != nil {
		return x.FailureRateThreshold
	}
	return 0
}

func (x *CircuitBreakerPolicy) GetSlowCallRateThreshold() uint32 {
	if x != nil {
		return x.SlowCallRateThreshold
	}
	return 0
}

func (x *CircuitBreakerPolicy) GetCountingNetworkError() bool {
	if x != nil {
		return x.CountingNetworkError
	}
	return false
}

func (x *CircuitBreakerPolicy) GetSlidingWindowSize() uint32 {
	if x != nil {
		return x.SlidingWindowSize
	}
	return 0
}

func (x *CircuitBreakerPolicy) GetPermittedNumberOfCallsInHalfOpenState() uint32 {
	if x != nil {
		return x.PermittedNumberOfCallsInHalfOpenState
	}
	return 0
}

func (x *CircuitBreakerPolicy) GetMinimumNumberOfCalls() uint32 {
	if x != nil {
		return x.MinimumNumberOfCalls
	}
	return 0
}

func (x *CircuitBreakerPolicy) GetSlowCallDurationThreshold() string {
	if x != nil {
		return x.SlowCallDurationThreshold
	}
	return ""
}

func (x *CircuitBreakerPolicy) GetMaxWaitDurationInHalfOpenState() string {
	if x != nil {
		return x.MaxWaitDurationInHalfOpenState
	}
	return ""
}

func (x *CircuitBreakerPolicy) GetWaitDurationInOpenState() string {
	if x != nil {
		return x.WaitDurationInOpenState
	}
	return ""
}

func (x *CircuitBreakerPolicy) GetFailureStatusCodes() []int32 {
	if x != nil {
		return x.FailureStatusCodes
	}
	return nil
}

// RetryerPolicy is the policy for describing Resilience component Retryer.
// It contains the basic configurations for the retryer, including the type of sliding window this
// breaker will use. Whether including network error or not and so on.
type RetryerPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the identify of this policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MaxAttempts configures the maximum number of attempts. (including the initial call as the first attempt)
	MaxAttempts int32 `protobuf:"varint,2,opt,name=maxAttempts,proto3" json:"maxAttempts,omitempty"`
	// WaitDuration configures the based and fixed wait duration between retry attempts.
	WaitDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=waitDuration,proto3" json:"waitDuration,omitempty"`
	// BackOffPolicy configures the two kinds of policy, random and exponential.
	BackOffPolicy string `protobuf:"bytes,4,opt,name=backOffPolicy,proto3" json:"backOffPolicy,omitempty"`
	// RandomizationFactor configures the factor used for backoff, value between 0 and 1.
	RandomizationFactor float64 `protobuf:"fixed64,5,opt,name=randomizationFactor,proto3" json:"randomizationFactor,omitempty"`
	// CountingNetworkError configures whether a network failure situation should retry or not.
	CountingNetworkError bool `protobuf:"varint,6,opt,name=countingNetworkError,proto3" json:"countingNetworkError,omitempty"`
	// FailureStatusCodes is the array for HTTP failure status code for this RetryPolicy.
	FailureStatusCodes []int32 `protobuf:"varint,7,rep,packed,name=failureStatusCodes,proto3" json:"failureStatusCodes,omitempty"`
}

func (x *RetryerPolicy) Reset() {
	*x = RetryerPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryerPolicy) ProtoMessage() {}

func (x *RetryerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryerPolicy.ProtoReflect.Descriptor instead.
func (*RetryerPolicy) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{2}
}

func (x *RetryerPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RetryerPolicy) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *RetryerPolicy) GetWaitDuration() *durationpb.Duration {
	if x != nil {
		return x.WaitDuration
	}
	return nil
}

func (x *RetryerPolicy) GetBackOffPolicy() string {
	if x != nil {
		return x.BackOffPolicy
	}
	return ""
}

func (x *RetryerPolicy) GetRandomizationFactor() float64 {
	if x != nil {
		return x.RandomizationFactor
	}
	return 0
}

func (x *RetryerPolicy) GetCountingNetworkError() bool {
	if x != nil {
		return x.CountingNetworkError
	}
	return false
}

func (x *RetryerPolicy) GetFailureStatusCodes() []int32 {
	if x != nil {
		return x.FailureStatusCodes
	}
	return nil
}

// StringMatch can be used to match string in different ways.
// Its priority is according to the field order. StringMatch will try exactly matching firstly,
// then try to check has the same prefix, at last, it will use the regular expression to match the
// string if it's provided
type StringMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exact configures the exactly URL value to match.
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3" json:"exact,omitempty"`
	// Prefix configures the prefix for URL to match.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Regex configures the regular expression for URL to match.
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
}

func (x *StringMatch) Reset() {
	*x = StringMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch) ProtoMessage() {}

func (x *StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch.ProtoReflect.Descriptor instead.
func (*StringMatch) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{3}
}

func (x *StringMatch) GetExact() string {
	if x != nil {
		return x.Exact
	}
	return ""
}

func (x *StringMatch) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *StringMatch) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

// URLRule can be used to filter HTTP request by using HTTP method and URL.
type URLRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Methods configures allowed HTTP method string, e.g. "GET","DELETE","POST"
	Methods []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	// StringMatch configures how to match the HTTP request URL.
	Url *StringMatch `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// PolicyRef configures which policy this URLRule references to.
	PolicyRef string `protobuf:"bytes,3,opt,name=policyRef,proto3" json:"policyRef,omitempty"`
}

func (x *URLRule) Reset() {
	*x = URLRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLRule) ProtoMessage() {}

func (x *URLRule) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLRule.ProtoReflect.Descriptor instead.
func (*URLRule) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{4}
}

func (x *URLRule) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *URLRule) GetUrl() *StringMatch {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *URLRule) GetPolicyRef() string {
	if x != nil {
		return x.PolicyRef
	}
	return ""
}

// RateLimiter can establish your services' high availability and reliability,
// also it can be used for scaling APIs. Protect your servers from overwhelm by the peak traffic.
type RateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RateLimiterPolicy contains different limiting configurations for this RateLimiter to use.
	Policies []*RateLimiterPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// DefaultPolicyRef is the default reference policy name.
	DefaultPolicyRef string `protobuf:"bytes,2,opt,name=defaultPolicyRef,proto3" json:"defaultPolicyRef,omitempty"`
	// URLs describe the HTTP request matching schemes for this limiter to filter.
	Urls []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *RateLimiter) Reset() {
	*x = RateLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter) ProtoMessage() {}

func (x *RateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter.ProtoReflect.Descriptor instead.
func (*RateLimiter) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{5}
}

func (x *RateLimiter) GetPolicies() []*RateLimiterPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *RateLimiter) GetDefaultPolicyRef() string {
	if x != nil {
		return x.DefaultPolicyRef
	}
	return ""
}

func (x *RateLimiter) GetUrls() []*URLRule {
	if x != nil {
		return x.Urls
	}
	return nil
}

// CircuitBreaker is used for blocking all in-coming requests when the the failure numbers
// reach the configured limitation. You can declare an CircuitBreaker with COUNT_BASED or
// TIME_BASED type.  It has three types of states, open, closed and half-close. One service
// can declare its desired CircuitBreaker, and the upstream clients will active the same CircuitBreaker
// locally when calling this service.
type CircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policies contain different breaker configurations for this CircuitBreaker to use.
	Policies []*CircuitBreakerPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// DefaultPolicyRef is the default reference policy name.
	DefaultPolicyRef string `protobuf:"bytes,2,opt,name=defaultPolicyRef,proto3" json:"defaultPolicyRef,omitempty"`
	// URLs describe the HTTP request matching schemes for this limiter to filter.
	Urls []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *CircuitBreaker) Reset() {
	*x = CircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker) ProtoMessage() {}

func (x *CircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker.ProtoReflect.Descriptor instead.
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{6}
}

func (x *CircuitBreaker) GetPolicies() []*CircuitBreakerPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *CircuitBreaker) GetDefaultPolicyRef() string {
	if x != nil {
		return x.DefaultPolicyRef
	}
	return ""
}

func (x *CircuitBreaker) GetUrls() []*URLRule {
	if x != nil {
		return x.Urls
	}
	return nil
}

// Retryer can perform an API calling retry when the service HTTP response code indicated its in
// temporary unavailable states. The up-stream client should make sure this API is idempotent.
// The service can declare an Retryer for its desired APIs and active in client side.
type Retryer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policies contain different retryer configurations for this Retryer to use.
	Policies []*RetryerPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// DefaultPolicyRef is the default reference policy name.
	DefaultPolicyRef string `protobuf:"bytes,2,opt,name=defaultPolicyRef,proto3" json:"defaultPolicyRef,omitempty"`
	// URLs describe the HTTP request matching schemes for this limiter to filter.
	Urls []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *Retryer) Reset() {
	*x = Retryer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Retryer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retryer) ProtoMessage() {}

func (x *Retryer) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retryer.ProtoReflect.Descriptor instead.
func (*Retryer) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{7}
}

func (x *Retryer) GetPolicies() []*RetryerPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Retryer) GetDefaultPolicyRef() string {
	if x != nil {
		return x.DefaultPolicyRef
	}
	return ""
}

func (x *Retryer) GetUrls() []*URLRule {
	if x != nil {
		return x.Urls
	}
	return nil
}

// Timeout is the amount of time the client should wait for replies from a given service,
// it will be running in upstream clients and declared in downstream relied services.
type TimeLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DefaultTimeoutDuration configures the default duration for timeout, e.g.,500ms.
	DefaultTimeoutDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=defaultTimeoutDuration,proto3" json:"defaultTimeoutDuration,omitempty"`
	// URLs describe the HTTP request matching schemes for this limiter to filter.
	Urls []*URLRule `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *TimeLimiter) Reset() {
	*x = TimeLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLimiter) ProtoMessage() {}

func (x *TimeLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLimiter.ProtoReflect.Descriptor instead.
func (*TimeLimiter) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{8}
}

func (x *TimeLimiter) GetDefaultTimeoutDuration() *durationpb.Duration {
	if x != nil {
		return x.DefaultTimeoutDuration
	}
	return nil
}

func (x *TimeLimiter) GetUrls() []*URLRule {
	if x != nil {
		return x.Urls
	}
	return nil
}

// Service is the basic element in EaseMesh to describe a user's business microservices'
// name, belonging tenant, and governance specs.
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the mesh service's name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// registerTenant is the tenant's name this service belongs to.
	RegisterTenant string `protobuf:"bytes,2,opt,name=registerTenant,proto3" json:"registerTenant,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{9}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetRegisterTenant() string {
	if x != nil {
		return x.RegisterTenant
	}
	return ""
}

// Resilience includes four key types of resilience features, RateLimiter, CircuitBreaker,
// Retryer and Timeout.
type Resilience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RateLimiter configuration.
	RateLimiter *RateLimiter `protobuf:"bytes,1,opt,name=rateLimiter,proto3" json:"rateLimiter,omitempty"`
	// CircuitBreaker configuration.
	CircuitBreaker *CircuitBreaker `protobuf:"bytes,2,opt,name=circuitBreaker,proto3" json:"circuitBreaker,omitempty"`
	// Retryer configuration.
	Retryer *Retryer `protobuf:"bytes,3,opt,name=retryer,proto3" json:"retryer,omitempty"`
	// TimeLimiter configuration
	TimeLimiter *TimeLimiter `protobuf:"bytes,4,opt,name=timeLimiter,proto3" json:"timeLimiter,omitempty"`
}

func (x *Resilience) Reset() {
	*x = Resilience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_meshmodel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resilience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resilience) ProtoMessage() {}

func (x *Resilience) ProtoReflect() protoreflect.Message {
	mi := &file_meshmodel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resilience.ProtoReflect.Descriptor instead.
func (*Resilience) Descriptor() ([]byte, []int) {
	return file_meshmodel_proto_rawDescGZIP(), []int{10}
}

func (x *Resilience) GetRateLimiter() *RateLimiter {
	if x != nil {
		return x.RateLimiter
	}
	return nil
}

func (x *Resilience) GetCircuitBreaker() *CircuitBreaker {
	if x != nil {
		return x.CircuitBreaker
	}
	return nil
}

func (x *Resilience) GetRetryer() *Retryer {
	if x != nil {
		return x.Retryer
	}
	return nil
}

func (x *Resilience) GetTimeLimiter() *TimeLimiter {
	if x != nil {
		return x.TimeLimiter
	}
	return nil
}

var File_meshmodel_proto protoreflect.FileDescriptor

var file_meshmodel_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x9e, 0x05, 0x0a, 0x14, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x6c, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x64,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a,
	0x25, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x49, 0x6e, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x6c, 0x6f, 0x77, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x6c, 0x6f, 0x77,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x57, 0x61, 0x69, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d,
	0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x77, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x77, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x22, 0x73, 0x0a,
	0x07, 0x55, 0x52, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x66, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66,
	0x12, 0x2e, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73,
	0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x72, 0x79, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x52, 0x4c,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x16, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x52, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x45, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x0e, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x65, 0x72, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x42, 0x16, 0x5a, 0x14, 0x65, 0x61, 0x73, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_meshmodel_proto_rawDescOnce sync.Once
	file_meshmodel_proto_rawDescData = file_meshmodel_proto_rawDesc
)

func file_meshmodel_proto_rawDescGZIP() []byte {
	file_meshmodel_proto_rawDescOnce.Do(func() {
		file_meshmodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_meshmodel_proto_rawDescData)
	})
	return file_meshmodel_proto_rawDescData
}

var file_meshmodel_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_meshmodel_proto_goTypes = []interface{}{
	(*RateLimiterPolicy)(nil),    // 0: easemesh.v1alpha1.RateLimiterPolicy
	(*CircuitBreakerPolicy)(nil), // 1: easemesh.v1alpha1.CircuitBreakerPolicy
	(*RetryerPolicy)(nil),        // 2: easemesh.v1alpha1.RetryerPolicy
	(*StringMatch)(nil),          // 3: easemesh.v1alpha1.StringMatch
	(*URLRule)(nil),              // 4: easemesh.v1alpha1.URLRule
	(*RateLimiter)(nil),          // 5: easemesh.v1alpha1.RateLimiter
	(*CircuitBreaker)(nil),       // 6: easemesh.v1alpha1.CircuitBreaker
	(*Retryer)(nil),              // 7: easemesh.v1alpha1.Retryer
	(*TimeLimiter)(nil),          // 8: easemesh.v1alpha1.TimeLimiter
	(*Service)(nil),              // 9: easemesh.v1alpha1.Service
	(*Resilience)(nil),           // 10: easemesh.v1alpha1.Resilience
	(*durationpb.Duration)(nil),  // 11: google.protobuf.Duration
}
var file_meshmodel_proto_depIdxs = []int32{
	11, // 0: easemesh.v1alpha1.RateLimiterPolicy.timeoutDuration:type_name -> google.protobuf.Duration
	11, // 1: easemesh.v1alpha1.RateLimiterPolicy.limitRefreshPeriod:type_name -> google.protobuf.Duration
	11, // 2: easemesh.v1alpha1.RetryerPolicy.waitDuration:type_name -> google.protobuf.Duration
	3,  // 3: easemesh.v1alpha1.URLRule.url:type_name -> easemesh.v1alpha1.StringMatch
	0,  // 4: easemesh.v1alpha1.RateLimiter.policies:type_name -> easemesh.v1alpha1.RateLimiterPolicy
	4,  // 5: easemesh.v1alpha1.RateLimiter.urls:type_name -> easemesh.v1alpha1.URLRule
	1,  // 6: easemesh.v1alpha1.CircuitBreaker.policies:type_name -> easemesh.v1alpha1.CircuitBreakerPolicy
	4,  // 7: easemesh.v1alpha1.CircuitBreaker.urls:type_name -> easemesh.v1alpha1.URLRule
	2,  // 8: easemesh.v1alpha1.Retryer.policies:type_name -> easemesh.v1alpha1.RetryerPolicy
	4,  // 9: easemesh.v1alpha1.Retryer.urls:type_name -> easemesh.v1alpha1.URLRule
	11, // 10: easemesh.v1alpha1.TimeLimiter.defaultTimeoutDuration:type_name -> google.protobuf.Duration
	4,  // 11: easemesh.v1alpha1.TimeLimiter.urls:type_name -> easemesh.v1alpha1.URLRule
	5,  // 12: easemesh.v1alpha1.Resilience.rateLimiter:type_name -> easemesh.v1alpha1.RateLimiter
	6,  // 13: easemesh.v1alpha1.Resilience.circuitBreaker:type_name -> easemesh.v1alpha1.CircuitBreaker
	7,  // 14: easemesh.v1alpha1.Resilience.retryer:type_name -> easemesh.v1alpha1.Retryer
	8,  // 15: easemesh.v1alpha1.Resilience.timeLimiter:type_name -> easemesh.v1alpha1.TimeLimiter
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_meshmodel_proto_init() }
func file_meshmodel_proto_init() {
	if File_meshmodel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_meshmodel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiterPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryerPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Retryer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_meshmodel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resilience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_meshmodel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshmodel_proto_goTypes,
		DependencyIndexes: file_meshmodel_proto_depIdxs,
		MessageInfos:      file_meshmodel_proto_msgTypes,
	}.Build()
	File_meshmodel_proto = out.File
	file_meshmodel_proto_rawDesc = nil
	file_meshmodel_proto_goTypes = nil
	file_meshmodel_proto_depIdxs = nil
}
